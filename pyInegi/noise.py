import numpy as np
import geopandas as gpd
from shapely.geometry import LineString, Point, Polygon
from scipy.spatial import Voronoi, voronoi_plot_2d

def add_noise(points, noise_level=1e-9):
    noise = np.random.normal(scale=noise_level, size=points.shape)
    return points + noise

# Supongamos que 'puntos' es tu array de puntos
puntos = np.array([
    [1103621.3087000027, 2234404.0625],
    [1103623.0879999995, 2234403.6675000004],
    [1103625.2490999997, 2234403.445700001],
    [1103627.4103000015, 2234403.2239999995],
    [1103628.8055000007, 2234404.8357999995],
    [1103629.5989999995, 2234401.5478999987],
    [1103627.7408000007, 2234399.4012],
    [1103625.579599999, 2234399.6229000017],
    [1103623.4184999987, 2234399.844700001],
    [1103621.639200002, 2234400.2397000007],
    [1103619.1318999976, 2234402.409400001],
    [1103618.0222000033, 2234404.0106999986],
    [1103618.8443000019, 2234406.1950000003],
    [1103621.3087000027, 2234404.0625]
])

puntos2 = np.array([
    [1103706.8100999966, 2234384.8707999997],
    [1103703.6469999999, 2234387.0694000013],
    [1103701.4013999999, 2234387.299800001],
    [1103701.3303999975, 2234387.5650999993],
    [1103698.830600001, 2234388.0339],
    [1103698.1621000022, 2234387.043400001],
    [1103695.5261000022, 2234386.1975999996],
    [1103691.9935000017, 2234383.7896],
    [1103688.7929000035, 2234382.839200001],
    [1103685.1586999968, 2234382.9990000017],
    [1103681.9505999982, 2234383.7542999983],
    [1103679.233599998, 2234385.7380000018],
    [1103676.941399999, 2234387.574099999],
    [1103674.3942999989, 2234389.4338999987],
    [1103670.1582999974, 2234390.401299998],
    [1103665.3356000036, 2234390.096999999],
    [1103662.6709000021, 2234393.0342000015],
    [1103660.0966999978, 2234394.6303000003],
    [1103659.2380999997, 2234397.3825000003],
    [1103657.9822999984, 2234400.7082],
    [1103655.3081, 2234405.7776999995],
    [1103654.8378000036, 2234410.088300001],
    [1103652.7691999972, 2234412.1653000005],
    [1103649.761, 2234416.2036000006],
    [1103649.2459999993, 2234417.8548999988],
    [1103649.0649000034, 2234420.5374],
    [1103646.5001000017, 2234420.0014000013],
    [1103645.0736000016, 2234417.2173999995],
    [1103643.9633999988, 2234413.0687999986],
    [1103639.818099998, 2234412.6950000003],
    [1103638.2188000008, 2234417.1215000004],
    [1103637.7849000022, 2234419.5636],
    [1103635.8515999988, 2234422.958799999],
    [1103635.0296000019, 2234423.8423999995],
    [1103630.3962000012, 2234425.383200001],
    [1103629.5107999966, 2234427.8718000017],
    [1103628.7427999973, 2234429.2826000005],
    [1103624.8504000008, 2234429.1492],
    [1103621.066200003, 2234430.0703000017],
    [1103620.6050999984, 2234432.2487999983],
    [1103621.4658000022, 2234433.715300001],
    [1103624.5199000016, 2234432.971999999],
    [1103628.4123999998, 2234433.105300002],
    [1103629.1802999973, 2234431.694600001],
    [1103630.0658000037, 2234429.206099998],
    [1103634.6991000026, 2234427.6651999988],
    [1103635.5210999995, 2234426.7815000005],
    [1103637.454400003, 2234423.386500001],
    [1103637.8883000016, 2234420.9442000017],
    [1103639.4877000004, 2234416.5177000016],
    [1103643.6328999996, 2234416.8916000016],
    [1103644.7431999967, 2234421.0401999988],
    [1103646.1696000025, 2234423.8242000006],
    [1103648.7343999967, 2234424.360199999],
    [1103648.9155000001, 2234421.6777000017],
    [1103649.4306000024, 2234420.0264],
    [1103652.438699998, 2234415.9880999997],
    [1103654.507299997, 2234413.9111],
    [1103654.9777000025, 2234409.600499999],
    [1103657.6517999992, 2234404.5309000015],
    [1103658.9076000005, 2234401.2052999996],
    [1103659.7661999986, 2234398.4532000013],
    [1103662.340400003, 2234396.8570999987],
    [1103665.005099997, 2234393.9197000004],
    [1103669.8279, 2234394.2239999995],
    [1103674.0637999997, 2234393.2566],
    [1103676.610799998, 2234391.396899998],
    [1103678.9030999988, 2234389.560800001],
    [1103681.620099999, 2234387.5771999992],
    [1103684.8281999975, 2234386.8216999993],
    [1103688.4623999968, 2234386.6620000005],
    [1103691.6630000025, 2234387.612300001],
    [1103695.1956999972, 2234390.020300001],
    [1103698.2154999971, 2234390.9893000014],
    [1103700.7876999974, 2234391.1515999995],
    [1103703.3165000007, 2234390.8922000006],
    [1103706.5537, 2234388.642000001],
    [1103706.5179999992, 2234386.5144000016],
    [1103706.8100999966, 2234384.8707999997]
])


# Agregar un peque√±o ruido a los puntos
puntos_con_ruido = puntos2 #add_noise(puntos)

#print(puntos_con_ruido)

# Crear el diagrama de Voronoi con los puntos con ruido
vor = Voronoi(puntos_con_ruido)
# Plotear el diagrama de Voronoi
import matplotlib.pyplot as plt
voronoi_plot_2d(vor)
plt.plot(puntos_con_ruido[:, 0], puntos_con_ruido[:, 1], 'ro',"POLYGON")
plt.show()

# Convertir los segmentos de Voronoi a LineString y crear un GeoDataFrame
lineas_voronoi = [LineString(vor.vertices[line]) for line in vor.ridge_vertices if -1 not in line]
gdf_voronoi = gpd.GeoDataFrame(geometry=lineas_voronoi)

# Guardar el resultado en un archivo shapefile
gdf_voronoi.to_file("DatosSalida/lineas_voronoi.shp")
